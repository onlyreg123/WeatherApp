type: edu
custom_name: What's the weather today?
files:
- name: web/app.py
  visible: true
  text: |
    from flask import Flask, render_template, request
    import json
    import requests
    import sys

    app = Flask(__name__)
    API_KEY = "9de13c4538217f87c06f2b1b2bfb27b2"
    # api.openweathermap.org/data/2.5/weather?q=Barcelona&appid=9de13c4538217f87c06f2b1b2bfb27b2
    # http://api.openweathermap.org/data/2.5/weather?q=Barcelona&appid=9de13c4538217f87c06f2b1b2bfb27b2
    @app.route('/', methods=['GET', 'POST'])
    def index():
        error = None
        if request.method == 'GET':
            return render_template('index.html')
        else:
            city_name = request.form['city_name'].upper()
            r = requests.get(f" http://api.openweathermap.org/data/2.5/weather?q={city_name}&units=metric&appid={API_KEY}")
            if r.status_code != 200:
                return f"City {city_name} doesn't exist"
            r_json = json.loads(r.text)
            temperature = r_json['main']['temp']
            weather_state = r_json['weather'][0]['main']
            # You need the city name, current temperature in celsius, and the current weather state.
            dict_with_weather_info = {'city_name': city_name, 'temperature': temperature, 'weather_state': weather_state}
            return render_template('index.html', weather=dict_with_weather_info)


    @app.route('/profile')
    def profile():
        return 'This is profile page'


    @app.route('/login')
    def log_in():
        return 'This is login page'


    # don't change the following way to run flask:
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            arg_host, arg_port = sys.argv[1].split(':')
            app.run(host=arg_host, port=arg_port)
        else:
            app.run()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import asyncio

    from hstest import FlaskTest, CheckResult, WrongAnswer
    from hstest import dynamic_test
    from hstest.dynamic.security.exit_handler import ExitHandler
    from pyppeteer import launch


    class FlaskProjectTest(FlaskTest):
        source = 'web.app'
        run_args = {
            "headless": False,
            "defaultViewport": None,
            "args": ['--start-maximized', '--disable-infobar'],
            "ignoreDefaultArgs": ['--enable-automation'],
        }

        async def launch_and_get_browser(self):
            try:
                return await launch(self.run_args)
            except Exception as error:
                raise WrongAnswer(str(error))

        async def close_browser(self, browser):
            try:
                await browser.close()
            except Exception as ex:
                print(ex)

        async def get_input_field(self, page):
            input_field = await page.querySelector('input#input-city')
            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")
            return input_field

        async def get_submit_button(self, page):
            button = await page.querySelector('button.submit-button')
            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")
            return button

        @classmethod
        async def check_cards_in_the_page(cls, page, cards_number):
            cards = await page.querySelectorAll('div.card')

            if len(cards) == 0:
                raise WrongAnswer("Can't find <div> blocks with class 'card'")

            if len(cards) != cards_number:
                raise WrongAnswer(f"Found {len(cards)} <div> blocks with class 'card', but should be {cards_number}!")

            for card in cards:
                degrees = await card.querySelector('div.degrees')
                if degrees is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'degrees'")
                state = await card.querySelector('div.state')
                if state is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'state'")
                city = await card.querySelector('div.city')
                if city is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'city'")

        async def test_response_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            try:
                await page.goto(self.get_url())
            except Exception:
                raise WrongAnswer(f"Can't access the main page with URL '{self.get_url()}'")
            await self.close_browser(browser)

        @dynamic_test(order=1)
        def test_response(self):
            ExitHandler.revert_exit()
            asyncio.get_event_loop().run_until_complete(self.test_response_async())
            return CheckResult.correct()

        async def test_main_page_structure_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()

            await page.goto(self.get_url())

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            button = await self.get_submit_button(page)
            input_field = await self.get_input_field(page)

            await self.check_cards_in_the_page(page, 3)

            await self.close_browser(browser)

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_main_page_structure(self):
            asyncio.get_event_loop().run_until_complete(self.test_main_page_structure_async())
            return CheckResult.correct()

        async def test_add_city_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Boston')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 4)

        @dynamic_test(order=3)
        def test_add_city(self):
            asyncio.get_event_loop().run_until_complete(self.test_add_city_async())
            return CheckResult.correct()


    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/164/stages/853/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 16 Jun 2021 14:29:39 UTC
record: 2
